@using RunningObjects.MVC
@using RunningObjects.MVC.Html
@using RunningObjects.MVC.Mapping
@model dynamic
@{
    TypeMapping currentType = Model.Type;
    IMappingElement currentElement = Model.Element;
}
<ul class="nav nav-list">
    @foreach (var query in currentType.Queries)
    {
        <li class="@(currentElement != null && query.ID == currentElement.ID ? "active" : string.Empty)">
            @Html.ActionLink(query.Name, currentType.ModelType, RunningObjectsAction.Index, new { q = query.ID })
        </li>
    }
    @if (currentType.Constructors.Any() || currentType.StaticMethods.Any())
    {
        <li class="divider"></li>
        foreach (var ctor in currentType.Constructors.Where(m => m.Visible))
        {
        <li  class="@(currentElement != null && ctor.ID == currentElement.ID ? "active" : string.Empty)">
            @Html.ActionLink(ctor.Name, ctor.Type.ModelType, ctor.UnderlineAction, new { index = ctor.Index })
        </li>
        }
        foreach (var method in currentType.StaticMethods.Where(m => m.Visible))
        {
        <li  class="@(currentElement != null && method.ID == currentElement.ID ? "active" : string.Empty)">
            @Html.ActionLink(method.Name, method.Type.ModelType, method.UnderlineAction, new { methodName = method.MethodName, index = method.Index })
        </li>
        }
    }
</ul>
