@using RunningObjects.MVC
@using RunningObjects.MVC.Html
@using RunningObjects.MVC.Mapping
@model IEnumerable<NamespaceMapping>
<ul class="navbar dropdown">
    @foreach (var ns in Model)
    {
        foreach (var type in ns.Types.Where(t => t.Visible))
        {
        @Type(type, false)
        }

        foreach (var cns in ns.Namespaces.Where(n => n.Visible))
        {
        @Namespace(cns, false)
        }
    }
</ul>
@helper Namespace(NamespaceMapping ns, bool subitem)
{
    <li><span class="dir">
        @DisplayName(ns, subitem)
    </span>
        @if (ns.Namespaces.Any() || ns.Types.Any())
        {
            <ul>
                @foreach (var cns in ns.Namespaces.Where(n => n.Visible))
                {
                    @Namespace(cns, true)
                }
                @foreach (var type in ns.Types.Where(t => t.Visible))
                {
                    @Type(type, true)
                }
            </ul>
        }
    </li>
    
}
@helper Type(TypeMapping type, bool subitem)
{
        
    <li><span class="dir">
        @DisplayName(type, subitem)
    </span>
        <ul>
            @foreach (var query in type.Queries.Where(q => q.Visible))
            {
                <li>
                    @Html.ActionLink(query.Name, type.ModelType, RunningObjectsAction.Index, new { q = query.ID })
                </li>
            }
            @foreach (var ctor in type.Constructors.Where(m => m.Visible))
            {
                @Method(ctor)
            }
            @foreach (var method in type.StaticMethods.Where(m => m.Visible))
            {
                @Method(method)
            }
        </ul>
    </li>

}
@helper Method(MethodMapping method)
{
    <li>
        @{
            var argument = method.UnderlineAction == RunningObjectsAction.Create
                ? (object)new { index = method.Index }
                : new { methodName = method.MethodName, index = method.Index };
        }
        @Html.ActionLink(method.Name, method.Type.ModelType, method.UnderlineAction, argument)
    </li>

}
@helper DisplayName(IMappingElement element, bool subitem)
{
    if (subitem)
    { 
        <i class="icon-chevron-right"></i>
        @element.Name
    }
    else
    {
        @element.Name    
        <i class="icon-chevron-down"></i>
    }
}